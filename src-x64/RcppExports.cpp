// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sumC
double sumC(NumericVector x);
RcppExport SEXP _BASSr_sumC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x));
    return rcpp_result_gen;
END_RCPP
}
// oppositeSigns
bool oppositeSigns(double x, int y);
RcppExport SEXP _BASSr_oppositeSigns(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(oppositeSigns(x, y));
    return rcpp_result_gen;
END_RCPP
}
// speedbass
double speedbass(NumericVector hex, NumericVector sample, NumericVector total, bool printDets);
RcppExport SEXP _BASSr_speedbass(SEXP hexSEXP, SEXP sampleSEXP, SEXP totalSEXP, SEXP printDetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type hex(hexSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sample(sampleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total(totalSEXP);
    Rcpp::traits::input_parameter< bool >::type printDets(printDetsSEXP);
    rcpp_result_gen = Rcpp::wrap(speedbass(hex, sample, total, printDets));
    return rcpp_result_gen;
END_RCPP
}
// allhexes
NumericVector allhexes(NumericMatrix hexes, NumericMatrix samples, NumericVector total, bool printDets);
RcppExport SEXP _BASSr_allhexes(SEXP hexesSEXP, SEXP samplesSEXP, SEXP totalSEXP, SEXP printDetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type hexes(hexesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type total(totalSEXP);
    Rcpp::traits::input_parameter< bool >::type printDets(printDetsSEXP);
    rcpp_result_gen = Rcpp::wrap(allhexes(hexes, samples, total, printDets));
    return rcpp_result_gen;
END_RCPP
}
// sumH
double sumH(NumericVector x, double h);
RcppExport SEXP _BASSr_sumH(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sumH(x, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BASSr_sumC", (DL_FUNC) &_BASSr_sumC, 1},
    {"_BASSr_oppositeSigns", (DL_FUNC) &_BASSr_oppositeSigns, 2},
    {"_BASSr_speedbass", (DL_FUNC) &_BASSr_speedbass, 4},
    {"_BASSr_allhexes", (DL_FUNC) &_BASSr_allhexes, 4},
    {"_BASSr_sumH", (DL_FUNC) &_BASSr_sumH, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_BASSr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
